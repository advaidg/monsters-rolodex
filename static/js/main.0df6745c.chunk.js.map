{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAM,SAACC,GAAD,OAEnB,sBAAKC,UAAU,iBAAf,UAEA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACnB,mCAAML,EAAMI,QAAQE,KAApB,OACA,8BAAIN,EAAMI,QAAQG,MAAlB,WCLUC,EAAU,SAACR,GAAD,OAEnB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCJlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SACjBa,KAAK,SACJF,YAAaA,EACZG,SAAUF,MCoDDG,G,wDAlDb,aAAe,IAAD,8BACZ,gBASFH,aAAe,SAAAI,GAEX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SATvC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAa,IALH,E,qDAiBd,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OACjEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAAET,SAAUkB,S,oBAI5D,WAAS,IAAD,EACwBC,KAAKN,MAA5Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAEEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCNI,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0df6745c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.style.css'\r\nexport const Card =(props) => (\r\n\r\n<div className=\"card-container\">\r\n\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2?size=180*180`} />\r\n   <h1> {props.monster.name} </h1>\r\n   <p>{props.monster.email} </p>\r\n\r\n\r\n</div>\r\n\r\n);\r\n\r\n","import React from 'react';\r\nimport './card-list.style.css'\r\nimport {Card} from '../card/card.component';\r\nexport const CardList =(props) => (\r\n    \r\n    <div className=\"card-list\">\r\n    {\r\n        props.monsters.map(monster => (\r\n            <Card key={monster.id} monster = {monster} />\r\n            \r\n            )) }\r\n    \r\n   </div>\r\n);","import React from 'react';\r\n\r\nimport \"..//search-box/search-box.style.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input className=\"search\"\r\n    type='search'\r\n     placeholder={placeholder}\r\n      onChange={handleChange}\r\n     /> \r\n      \r\n\r\n\r\n\r\n);","\nimport React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField: ''\n      \n    }\n  }\n\n  handleChange = e => {\n    \n      this.setState({searchField: e.target.value});\n\n\n\n  };\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(Response =>\n    Response.json()).then(users =>this.setState({ monsters :users}))\n    \n  }\n\nrender(){\n  const {monsters, searchField}=this.state;\n  const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox \n    \n      placeholder=\"Search Monsters\" \n      handleChange={this.handleChange}\n      />\n\n    <CardList monsters={filteredMonsters}>\n    </CardList>\n  </div>\n\n);\n\n\n\n  \n}\n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}